{"version":3,"sources":["utils/cropImage.js","App.js","index.js"],"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","getCroppedImg","imageSrc","pixelCrop","a","rotation","canvas","document","createElement","ctx","getContext","maxSize","max","width","height","safeArea","sqrt","translate","rotate","drawImage","data","getImageData","putImageData","x","y","generateDownload","crop","toBlob","blob","previewUrl","window","URL","createObjectURL","anchor","download","href","click","revokeObjectURL","App","inputRef","React","useRef","useState","setImage","croppedArea","setCroppedArea","setCrop","zoom","setZoom","className","aspect","onCropChange","onZoomChange","onCropComplete","croppedAreaPercentage","croppedAreaPixels","Slider","min","step","value","onChange","e","type","accept","ref","event","target","files","length","reader","FileReader","readAsDataURL","result","style","display","Button","variant","color","onClick","current","marginRight","rootElement","getElementById","ReactDOM","render"],"mappings":"6PAOMA,EAAc,SAACC,GAAD,OAClB,IAAIC,SAAQ,SAACC,EAASC,GACpB,IAAMC,EAAQ,IAAIC,MAClBD,EAAME,iBAAiB,QAAQ,kBAAMJ,EAAQE,MAC7CA,EAAME,iBAAiB,SAAS,SAACC,GAAD,OAAWJ,EAAOI,MAClDH,EAAMI,aAAa,cAAe,aAClCJ,EAAMK,IAAMT,MAGhB,SAASU,EAAeC,GACtB,OAAQA,EAAcC,KAAKC,GAAM,IAGpB,SAAeC,EAA9B,oC,4CAAe,WAA6BC,EAAUC,GAAvC,uCAAAC,EAAA,6DAAkDC,EAAlD,+BAA6D,EAA7D,SACOnB,EAAYgB,GADnB,cACPX,EADO,OAEPe,EAASC,SAASC,cAAc,UAChCC,EAAMH,EAAOI,WAAW,MAExBC,EAAUZ,KAAKa,IAAIrB,EAAMsB,MAAOtB,EAAMuB,QACtCC,EAAiBJ,EAAU,EAAKZ,KAAKiB,KAAK,GAA/B,EAIjBV,EAAOO,MAAQE,EACfT,EAAOQ,OAASC,EAGhBN,EAAIQ,UAAUF,EAAW,EAAGA,EAAW,GACvCN,EAAIS,OAAOrB,EAAeQ,IAC1BI,EAAIQ,WAAWF,EAAW,GAAIA,EAAW,GAGzCN,EAAIU,UACF5B,EACAwB,EAAW,EAAkB,GAAdxB,EAAMsB,MACrBE,EAAW,EAAmB,GAAfxB,EAAMuB,QAGjBM,EAAOX,EAAIY,aAAa,EAAG,EAAGN,EAAUA,GAG9CT,EAAOO,MAAQV,EAAUU,MACzBP,EAAOQ,OAASX,EAAUW,OAG1BL,EAAIa,aACFF,EACA,EAAIL,EAAW,EAAkB,GAAdxB,EAAMsB,MAAcV,EAAUoB,EACjD,EAAIR,EAAW,EAAmB,GAAfxB,EAAMuB,OAAeX,EAAUqB,GAnCvC,kBAwCNlB,GAxCM,6C,sBA2CR,IAAMmB,EAAgB,uCAAG,WAAOvB,EAAUwB,GAAjB,SAAAtB,EAAA,yDACzBsB,GAASxB,EADgB,iEAKTD,EAAcC,EAAUwB,GALf,cAOvBC,QACL,SAACC,GACC,IAAMC,EAAaC,OAAOC,IAAIC,gBAAgBJ,GAExCK,EAAS1B,SAASC,cAAc,KACtCyB,EAAOC,SAAW,aAClBD,EAAOE,KAAOJ,IAAIC,gBAAgBJ,GAClCK,EAAOG,QAEPN,OAAOC,IAAIM,gBAAgBR,KAE7B,aACA,KAnB4B,2CAAH,wD,OCtDd,SAASS,IACtB,IAAMC,EAAWC,IAAMC,SADK,EAIFD,IAAME,SAAS,MAJb,mBAIrBnD,EAJqB,KAIdoD,EAJc,OAKUH,IAAME,SAAS,MALzB,mBAKrBE,EALqB,KAKRC,EALQ,OAMJL,IAAME,SAAS,CAAEnB,EAAG,EAAGC,EAAG,IANtB,mBAMrBE,EANqB,KAMfoB,EANe,OAOJN,IAAME,SAAS,GAPX,mBAOrBK,EAPqB,KAOfC,EAPe,KA2B5B,OACE,sBAAKC,UAAU,YAAf,UACE,qBAAKA,UAAU,oBAAf,SACG1D,EACC,qCACE,qBAAK0D,UAAU,UAAf,SACE,cAAC,IAAD,CACE1D,MAAOA,EACPmC,KAAMA,EACNqB,KAAMA,EACNG,OAAQ,EACRC,aAAcL,EACdM,aAAcJ,EACdK,eA/BS,SAACC,EAAuBC,GAC7CV,EAAeU,QAkCP,qBAAKN,UAAU,SAAf,SACE,cAACO,EAAA,EAAD,CACEC,IAAK,EACL7C,IAAK,EACL8C,KAAM,GACNC,MAAOZ,EACPa,SAAU,SAACC,EAAGd,GAAJ,OAAaC,EAAQD,WAInC,OAGN,sBAAKE,UAAU,oBAAf,UACE,uBACEa,KAAK,OACLC,OAAO,UACPC,IAAKzB,EACLqB,SAjDa,SAACK,GACpB,GAAIA,EAAMC,OAAOC,OAASF,EAAMC,OAAOC,MAAMC,OAAS,EAAG,CACvD,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcN,EAAMC,OAAOC,MAAM,IACxCE,EAAO5E,iBAAiB,QAAQ,WAC9BkD,EAAS0B,EAAOG,aA6CdC,MAAO,CAAEC,QAAS,UAEpB,cAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,QAlEuB,kBAAMvC,EAASwC,QAAQ3C,SAmE9CqC,MAAO,CAAEO,YAAa,QAJxB,oBAQA,cAACL,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAYC,QAlDjC,WACjBrD,EAAiBlC,EAAOqD,IAiDpB,4BC7ER,IAAMqC,EAAc1E,SAAS2E,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC9C,EAAD,MAEF2C,K","file":"static/js/main.a289eb85.chunk.js","sourcesContent":["/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n * @param {File} imageSrc - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n * @param {number} rotation - optional rotation parameter\n */\n\nconst createImage = (url) =>\n  new Promise((resolve, reject) => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => resolve(image));\n    image.addEventListener(\"error\", (error) => reject(error));\n    image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n    image.src = url;\n  });\n\nfunction getRadianAngle(degreeValue) {\n  return (degreeValue * Math.PI) / 180;\n}\n\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0) {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n\n  const maxSize = Math.max(image.width, image.height);\n  const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2));\n\n  // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n  canvas.width = safeArea;\n  canvas.height = safeArea;\n\n  // translate canvas context to a central location on image to allow rotating around the center.\n  ctx.translate(safeArea / 2, safeArea / 2);\n  ctx.rotate(getRadianAngle(rotation));\n  ctx.translate(-safeArea / 2, -safeArea / 2);\n\n  // draw rotated image and store data.\n  ctx.drawImage(\n    image,\n    safeArea / 2 - image.width * 0.5,\n    safeArea / 2 - image.height * 0.5\n  );\n\n  const data = ctx.getImageData(0, 0, safeArea, safeArea);\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n\n  // paste generated rotate image with correct offsets for x,y crop values.\n  ctx.putImageData(\n    data,\n    0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x,\n    0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y\n  );\n\n  // As Base64 string\n  // return canvas.toDataURL(\"image/jpeg\");\n  return canvas;\n}\n\nexport const generateDownload = async (imageSrc, crop) => {\n  if (!crop || !imageSrc) {\n    return;\n  }\n\n  const canvas = await getCroppedImg(imageSrc, crop);\n\n  canvas.toBlob(\n    (blob) => {\n      const previewUrl = window.URL.createObjectURL(blob);\n\n      const anchor = document.createElement(\"a\");\n      anchor.download = \"image.jpeg\";\n      anchor.href = URL.createObjectURL(blob);\n      anchor.click();\n\n      window.URL.revokeObjectURL(previewUrl);\n    },\n    \"image/jpeg\",\n    0.66\n  );\n};\n","import React from \"react\";\nimport \"./app.css\";\n\nimport Cropper from \"react-easy-crop\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { generateDownload } from \"./utils/cropImage\";\n\nexport default function App() {\n  const inputRef = React.useRef();\n  const triggerFileSelectPopup = () => inputRef.current.click();\n\n  const [image, setImage] = React.useState(null);\n  const [croppedArea, setCroppedArea] = React.useState(null);\n  const [crop, setCrop] = React.useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = React.useState(1);\n\n  const onCropComplete = (croppedAreaPercentage, croppedAreaPixels) => {\n    setCroppedArea(croppedAreaPixels);\n  };\n\n  const onSelectFile = (event) => {\n    if (event.target.files && event.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.readAsDataURL(event.target.files[0]);\n      reader.addEventListener(\"load\", () => {\n        setImage(reader.result);\n      });\n    }\n  };\n\n  const onDownload = () => {\n    generateDownload(image, croppedArea);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"container-cropper\">\n        {image ? (\n          <>\n            <div className=\"cropper\">\n              <Cropper\n                image={image}\n                crop={crop}\n                zoom={zoom}\n                aspect={1}\n                onCropChange={setCrop}\n                onZoomChange={setZoom}\n                onCropComplete={onCropComplete}\n              />\n            </div>\n\n            <div className=\"slider\">\n              <Slider\n                min={1}\n                max={3}\n                step={0.1}\n                value={zoom}\n                onChange={(e, zoom) => setZoom(zoom)}\n              />\n            </div>\n          </>\n        ) : null}\n      </div>\n\n      <div className=\"container-buttons\">\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          ref={inputRef}\n          onChange={onSelectFile}\n          style={{ display: \"none\" }}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={triggerFileSelectPopup}\n          style={{ marginRight: \"10px\" }}\n        >\n          Choose\n        </Button>\n        <Button variant=\"contained\" color=\"secondary\" onClick={onDownload}>\n          Download\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}